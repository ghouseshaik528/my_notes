//Creating a database:

EX-1: 
CREATE DATABASE sales DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_unicode_ci;

EX-2: 
CREATE DATABASE Employees DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_unicode_ci;

//creating a table:

CREATE TABLE `sales`.`customers` 

( `Customer_id` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,    
  `firstname` VARCHAR(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL , 
   `lastname` VARCHAR(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL , 
   `Address` VARCHAR(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL , 
   PRIMARY KEY (`Customer_id`)
) ENGINE = InnoDB;

//Inserting data into a table:

EX-1:
INSERT INTO customers
(`Customer_id`, `firstname`, `lastname`, `Address`) 
VALUES 
(NULL, 'Faheem', 'Syed', 'Kurnool, Andhra Pradesh, India,516603'), 
hNULL, 'Afreen', 'Shaik', 'Kadapa, Andhra Pradesh, India, 516001'), 
(NULL, 'Farheen', 'Shaik', 'Nellore, Andhra Pradesh, India, 566020'), 
(NULL, 'Tasu', 'Shaik', 'Goa, Central, India, 559402'), 
(NULL, 'Raees', 'Shaik', 'Salmiya, Kuwait, Gulf, 153124')

EX-2:
INSERT INTO items (item_name,item_price)
VALUES
('Pomogranate','55.95'),
('Avagardo','150.55'),
('Dates','200.45'),
('Almonds','114.39'),
('Orange','20.22')

Note:
-we don't need semi-colon if we have just one query. It is only needed when we have multiple queries.

//Importing data into our database by using the import field in phpmyadmin

//Retreiving data from a database

SELECT *FROM 'TABLENAME'
SELECT 'col1','col2' FROM 'TABLENAME'
SELECT * FROM 'TABLENAME' ORDERBY 'col'
SELECT * FROM 'TABLENAME' ORDERBY 'col' DESC
SELECT * FROM 'TABLENAME' ORDERBY 'col' LIMIT 5
SELECT * FROM 'TABLENAME' ORDERBY 'col' LIMIT 5 OFFSET 3 
SELECT * FROM 'TABLENAME' ORDERBY 'col' LIMIT 3,5

//Selecting matching records search criteria:

SELECT * FROM 'TABLENAME' WHERE 'column1' = 'search_text'
SELECT * FROM `items` WHERE item_price = 20

SELECT * FROM 'TABLENAME' WHERE 'column1' != 'search_text'
SELECT * FROM `items` WHERE item_price != 20

SELECT * FROM 'TABLENAME' WHERE 'column1' LIKE '%search_text%'
SELECT * FROM 'TABLENAME' WHERE 'column1' NOT LIKE '%search_text%'
SELECT * FROM 'TABLENAME' WHERE 'column1' LIKE '%search_text%' && 'column2' LIKE '%search_text%'
SELECT * FROM 'TABLENAME' WHERE 'column1' LIKE '%search_text%' || 'column2' LIKE '%search_text%'

//Numerical Operations

SELECT * FROM `items` WHERE item_price BETWEEN 20 AND 100
SELECT * FROM `items` WHERE item_price >=20 && item_price <=100
Note : using '&' in BETWEEN operator will not work.

SELECT * FROM `items` WHERE item_price NOT BETWEEN 20 AND 100
SELECT * FROM `items` WHERE item_price <=20 || item_price >=100

//Aggregate Functions

Note:
- In MySQL NULL values will not be counted.
- No spaces will be allowed between functions and column name

SELECT COUNT(item_price) from items
SELECT AVG(item_price) from items
SELECT MAX(item_price) from items
SELECT MIN(item_price) from items
SELECT SUM(item_price) from items

//Round Function

Syntax: SELECT ROUND('column_name',decimal_points) FROM TABLENAME

Rounding Halves to even applies to non exact numeric data types:
FLOAT,DOUBLE,REAL
EX: SELECT ROUND(item_price,0) FROM items //results will lowered for example if we have 5.5 then it will be rounded to 5.

Rounding halves away from zero applies to exact numeric data types:
DECIMAL, NUMERIC
TINYINT,SMALLINT,MEDIUMINT,BIGINT
EX: SELECT ROUND(item_price,0) FROM items //results will highered for example if we have 5.5 then it will be rounded to 6.

//String Function

Syntax:
SELECT FUNCTION_NAME('column_name') FROM TABLENAME
SELECT FUNCTION_NAME('column_name',parameter1,parameter2) FROM TABLENAME

SELECT UCASE('lastname') FROM customers
SELECT UPPER('lastname') FROM customers

SELECT LCASE('lastname') FROM customers
SELECT LOWER('lastname') FROM customers

SELECT CHAR_LENGTH('lastname') FROM customers
SELECT LENGTH('lastname') FROM customers

SELECT LEFT('lastname',3) FROM customers
SELECT RIGHT('lastname',3) FROM customers

//Syntax of MID() function:
MID = SUBSTRING = SUBSTR

SELECT MID('column_name',start,length) FROM TABLENAME
SELECT MID('lastname',1,5) FROM customers
SELECT MID('lastname',-5,1) FROM customers
SELECT MID('lastname',-5) FROM customers

SELECT SUBSTRING('lastname',1,5) FROM customers
SELECT SUBSTRING('lastname',-5) FROM customers
SELECT SUBSTRING('lastname',-5,1) FROM customers

SELECT SUBSTR('lastname',1,5) FROM customers
SELECT SUBSTR('lastname',-5) FROM customers
SELECT SUBSTR('lastname',-5,1) FROM customers

SELECT MID('lastname',FROM 1 FOR 5) FROM customers
SELECT SUBSTRING('lastname',FROM 1 FOR 5) FROM customers
SELECT SUBSTR('lastname',FROM 1 FOR 5) FROM customers

//TRIM() function: Removes the spaces

SELECT TRIM('lastname') FROM customers
SELECT LTRIM('lastname') FROM customers
SELECT RTRIM('lastname') FROM customers

//CONCAT() function:
SELECT CONCAT('firstname',' ','lastname') FROM customers

//Syntax of AS clause
SELECT 'column' AS 'ALIAS' FROM TABLENAME
SELECT CONCAT('firstname',' ','lastname')  AS fullname FROM customers

SELECT LEFT('lastname',3) AS code FROM customers

//Reverse() function
SELECT REVERSE('lastname') FROM customers

//multiple tables aliasing:
SELECT firstname AS first lastname AS last FROM customers

//Functions within functions
EX-1:
SELECT UPPER(CONCAT('firstname',' ','lastname'))  
    AS fullname 
        FROM customers

EX-2:
SELECT 
    UPPER(
        CONCAT(LEFT(FIRST_NAME,3),'-',LEFT(LAST_NAME,3),'-',EMP_ID) )
    FROM employee


//UPDATE syntax:
UPDATE 'TABLENAME' SET 'column_name' = 'value'
        WHERE 'column_name' = 'value'

UPDATE items SET item_price = 19.22
        WHERE item_id=1

//REPLACE: If we want to replace the word from multiple records then we use replace keyword

UPDATE 'TABLENAME'
    SET 'column_name' = 
        REPLACE('column_name','old_value','new_value')

UPDATE items
    SET item_name = 
        REPLACE('item_name','juice','mixer')

//ALTER TABLE SYNTAX:

ALTER TABLE 'TABLENAME' ADD 'new column_name' DATATYPE(size)

Note:
- Although we have defined our CHARACTER SET it will be automatically set to DEFAULT as utf8mb4
- We can specifically also can set the CHARACTER SET as

ALTER TABLE 'TABLENAME' ADD 'new column_name' DATATYPE(size)
            CHARACTER SET utf8mb4
            COLLATE utf8mb4_unicode_ci
            NULL
            AFTER 'column_name'/FIRST

//Altering Existing column_name syntax:

ALTER TABLE 'TABLENAME' 
    CHANGE 'Existing column_name' 'new column_name' DATATYPE(size)
    (other details optional)

//Exporting data to SQL file

//Delete syntax:

DELETE FROM 'TABLENAME' WHERE 'column_name' = 'value'
DELETE FROM 'TABLENAME' WHERE 'column_name' != 'value'
DELETE FROM 'TABLENAME' WHERE 'column_name' LIKE '%value%'
DELETE FROM 'TABLENAME' WHERE 'column_name' NOT LIKE '%value%'

EX: DELETE FROM items WHERE item_id=9

//DROP syntax:

//deleting a column from a table
ALTER TABLE 'TABLENAME' DROP 'column_name'
ALTER TABLE items DROP item_price

//deleting all records from a table
DELETE from items
Note:
DELETE does not reset auto-incrementing ID number - this continues from largest number before records were deleted.

//TRUNCATE TABLE:
- This will delete all the records along with the AUTO_INCREMENT values

TRUNCATE TABLE 'column_name'

//DROP TABLE:
DROP TABLE 'TABLENAME'

//DROP DATABASE:
DROP DATABASE 'database_name'


















































































































































































