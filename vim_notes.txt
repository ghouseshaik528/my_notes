Vim Notes   on  8/1/19:
=======================

>vi is originally derived from unix and has limited functionalities when compared to vim text editor, and it is only works in linux or unix based systems.

>vim was originally developed on omega os and supports many flavours of os.

>vim is a superset of vi, and it also allows to create .rc files supports many plugins like syntax highlighting,types of files, code completion behaviour.

>vim allows you to multi level undo or redo.
>vim allows you to split the screen for multiple editing file and we can also edit the file inside the archive mode or compressed mode.

Note : there is a famous website where we can download vim plugins "https://vimawesome.com/".

Difference between vi and vim :

VIM :
-----
    -Functionally, vim is almost a proper superset of vi. Therefore, everything that is in vi is available in vim.
    -Vim adds onto those features. Here are a some of the extended vim features:
    -Vim has been ported to a much wider range of OS's than vi.
    -Vim includes support (syntax highlighting, code folding, etc) for several popular programming         languages (C/C++, Python, Perl, shell, etc).
    -Vim integrates with cscope.
    -Vim can be used to edit files using network protocols like SSH and HTTP.
    -Vim includes multilevel undo/redo.
    -Vim allows the screen to be split for editing multiple files.
    -Vim can edit files inside a compressed archive (gzip, zip, tar, etc).
    -Vim includes a built in diff for comparing files (vimdiff).    
    -Vim includes support for plugins, and finer control over config and startup files.
    -Vim can be scripted with vimscript, or with an external scripting language (e.g. python, perl,         shell).
VI :
----
    -"vi" is an text editor from the early days of Unix. It became quite popular and made its way into the Single Unix Specification (SUS) and POSIX, but wasn't freely available (until 2002).

    -So several free vi-like editors emerged. Vim (" vi improved") is one of this editors. As the name suggest it adds lot of functions to the original vi interface.

    -In Ubuntu Vim is the only vi-like editor installed by default, and so vi actually starts Vim by default.

    -Other popular vi-like editors available in Ubuntu are for example nvi and elvis.

Vim packages and creating files:
--------------------------------

    - To install vim use command
        apt-get install vim - for ubuntu based systems
        yum install vim - for centos based systems
    
    - To install GUI Vim use command
        sudo apt install vim-gnome - for ubuntu
        yum install gvim - for centos

Vim modes:
----------

    Normal Mode:
    ------------
        -By default VIM enters into Normal mode.
        -Normal mode can be accessed from other modes by pressing Esc or <C-[>.

        Move the cursor:
            h move one character left
            j move one row down
            k move one row up
            l move one character right

        As many vim commands, row movement can be prefixed by a number to move several lines at a time:
            4j move 4 rows down
            6k move 6 rows up

        Basic word movements:
            w move to beginning of next word
            b move to previous beginning of word
            e move to end of word
            W move to beginning of next word after a whitespace
            B move to beginning of previous word before a whitespace
            E move to end of word before a whitespace

        Beginning/End of line movement:
            0 move to the beginning of the line
            $ move to the end of the line

        In normal mode, there are multiple ways to move around an open file. In addition to using the cursor keys to move around, you can use h (left), j (down), k (up), and l (right) to move as well. This particularly helps touch typists who don’t like leaving the home row when making changes.

        You can also make changes to single characters in normal mode. For example, to replace a single character, move your cursor over it and press r, and then the character you want to replace it with. Similarly, you can delete single characters by moving your cursor over it and pressing x.

        To perform an undo, press u in normal mode. This undoes changes up to the last time you were in normal mode. If you want to redo (i.e., undo your undo) press Ctrl+r in normal mode.

    Insert Mode:
    ------------
        This is the second most used mode, and will be the most familiar behavior to most people. Once in insert mode, typing inserts characters just like a regular text editor. You can enter it by using an insert command from normal mode.

        Insert commands include:
            i for ’insert’, this immediately switches vim to insert mode
            a for ’append’, this moves the cursor after the current character and enters insert mode
            o inserts a new line below the current line and enters insert mode on the new line
        These commands have an uppercase variety too:
            I moves the cursor to the beginning of the line and enters insert mode
            A moves the cursor to the end of the line and enters insert mode
            O inserts a new line above the current one and enters insert mode on the new line

        There are so many more ways of inserting text in Vim that can’t be listed here but these are the simplest. Also, beware of staying in insert mode for too long; Vim is not designed to be used in insert mode all the time.
        
        To undo, we use 'u', and if we want to redo we use '.'
        To delete a line we use 'dd'
        To delete a line after the cursor use "D".
        
        If i want to print the same line for multiple times like for example 4times then, in normal mode press 4i, then type your line like 'This is a test'.It will print your line for 4 times.
        //y we can delete or replace by using the above method.

        To leave insert mode and return to normal mode, press Esc or <C-[>
    Visual Mode:
    ------------
        Visual mode is used to make selections of text, similar to how clicking and dragging with a mouse behaves. Selecting text allows commands to apply only to the selection, such as copying, deleting, replacing, and so on.

        To make a text selection:
            Press v to enter visual mode, this will also mark a starting selection point
            Move the cursor to the desired end selection point; vim will provide a visual highlight of the text selection

        Visual mode also has the following variants:
            V to enter visual line mode, this will make text selections by line
            <C-V> to enter visual block mode, this will make text selections by blocks; moving the cursor will make rectangle selections of the text

        To leave visual mode and return to normal mode, press Esc or <C-[>.
    
        The visual mode actually has multiple subtypes: visual, block-visual and linewise-visual
            visual: like described above. Enter by pressing v
            block-visual: select any rectangular region. Enter by pressing <ctrl>+v
            linewise-visual: always select full lines. Enter by pressing <shift>+v

    Command Mode:
    -------------
        Command mode has a wide variety of commands and can do things that normal mode can’t do as easily. To enter command mode type ’:’ from normal mode and then type your command which should appear at the bottom of the window. For example, to do a global find and replace type :%s/foo/bar/g to replace all ‘foo’ with ‘bar’

        : Enters command mode
        % Means across all lines
        s Means substitute
        /foo is regex to find things to replace
        /bar/ is regex to replace things with
        /g means global, otherwise it would only execute once per line
        Vim has a number of other methods that you can read about in the help documentation, :h or :help.

    Replace Mode:
    -------------
        Replace mode allows you replace existing text by directly typing over it. Before entering this mode, get into normal mode and put your cursor on top of the first character that you want to replace. Then press ‘R’ (capital R) to enter replace mode. Now whatever you type will replace the existing text. The cursor automatically moves to the next character just like in insert mode. The only difference is that every character you type will replace the existing one.

12JAN2019:
----------
copy,paste,search and replace:
------------------------------
y - to copy
yy - to copy a whole line
p - to paste a line
to copy a specific word press 'v' at starting of the word and then after Selecting press 'y' that it, and now you can use paste 'p' keyword to paste at your desired location.
shift+>> - to use indentation
shift+<< - to remove indentation

search:
-------
/'string' - we use '/' to search from top to bottom
?'string' - we use '?' to search from bottom to top
we use 'n' to forward and 'N' to backward search

Replace:
--------
:%s/'string that you want to replace'/'new string'/g
    Here 'g' thoughout the file
ex: %s/ex/EX/g  - it will replace whole file with "EX" without confirming.

:#s/ex/EX/gc -it will confirm you whether you want to change it or not.
    here c means confirm

Executing external commands:
----------------------------
: ! ls -al ~       - it will execute the command in the current shell 
: ! ls -al ~/testfiles - it will search for a testfiles.

if i want to pull the data from other files without exiting my current file then we use this command

: r ! cat /root/.bash_profile   - it will read the contents of file and paste in our current file.

if i want to know how many files are present in /etc direcory without leaving my current shell then we can use this command as 

: r ! ls -la /etc | wc -l

if i want sort the things that are present in my current working shell then we can use this command to sort the result as

: 16,23 ! sort -r - here i am changing the numbers in reverse order, by using the line numbers.

13JAN2019:
----------

if i want to make changes and save it in a new file then use
    saveas my_file.txt
bad - buffer address
bn  - switch to next buffer
f   - if we want to know which file we are editing then we can check in the cmd prompt
ctrl+6 - if we can go back n forth to available buffer.




Now done.